一、安装Git→Git Bash启动Git命令窗口→设置用户名称和邮箱地址

    $ git config --global user.name "Your Name"
    $ git config --global user.email "email address"

二、创建版本库

    1.创建一个目录或者用自己已有的目录
    2.右键该目录，打开Git Bash，输入git init初始化一个仓库
    3.在该目录下新建一个xxx.txt文件，输入命令git add xxx.txt(必须带后缀)；
    4.输入命令：git commit -m"提交内容"，提交该文件到仓库；

三、版本回退

   1.输入命令：git status查看该文件的状态，若有红色 modify字眼，表示该文件内容改变但是没有add到仓库，若是绿色，表示已经add，但是没有commit；
   2.命令：git diff xxx.txt查看改动内容；
   3.提交文件流程：git add xxx.txt → git commit -m"改动说明"
   4.git log查看历史记录，git log --pretty=oneline使每条记录只占一行；
   5.版本回退：git log查看历史记录，然后输入命令：git reset --hard HARD~n(n代表从新到老的第几个版本)；
     或者输入：git reset --hard xxxxx(版本号)，可以指定到某个版本；
   6.git reflog可以查看之前输入过的命令，并附带每个版本的版本号，可以用来reset任何一个版本；

四、工作区、暂存区、分支
   
   1.添加、修改文件，在工作区；
   2.git add 文件，会把文件添加到stage暂存区；
   3.git commit 文件，会把stage暂存区的所有文件添加到分支

   4.git checkout -- file 可以撤销工作区的修改(只是工作区当前的修改)；
   5.git reset HEAD file可以在误操作git add后回退到当前修改之前的版本；

五、出现Unable to create 'E:/xxx/.git/index.lock': File exists.异常
   
   在.git的同级目录打开Git Bash执行：rm -f .git/index.lock

六、删除和撤销删除和克隆

   1.git rm file删除一个文件；
   2.git checkout -- file 撤销删除/git reset --hard HEAD也有同样的效果；
   3.git clone git@github.com:lpy0507/gitClone.git(前提是github上创建库时勾选Initialize this repository with a README)

七、分支:"name"是分支的名字

  1.git checkout -b dev;等同于下面两个命令的合体:创建并切换分支
  2.git branch dev;创建分支
  3.git checkout dev;切换分支
  4.git branch;查看当前是哪个分支
  5.git merge name;合并某分支到当前分支
  6.git branch -d name;删除分支
  7.git branch -D name:强制删除分支
  8.git merge --no-ff -m"" dev:表示禁用Fast Forward,
      即普通模式合并，合并后的历史有分支，能看出来曾经做过合并，而fast forward合并就看不出来曾经做过合并。

八、提交记录Log
    1.git log：查看提交记录；
    2.git log --pretty=oneline:记录一行展示；
    3.git log --graph --pretty=oneline:图表展示分支合并情况(展示版本号全部内容)；
    4.git log --graph --pretty=oneline --abbrev-commit:图表展示分支合并情况(展示版本号前6位);

九、add的几种方式

      git add -A .来一次添加所有改变的文件。注意 -A 选项后面还有一个句点。 
   
      git add -A表示添加所有内容， 
  
      git add . 表示添加新文件和编辑过的文件不包括删除的文件; 
 
      git add -u 表示添加编辑或者删除的文件，不包括新添加的文件。

十、添加远程仓库、推送
      
      git remote add origin https://github.com/lpy0507/Git.git

      git remote add origin git@github.com:lpy0507/Git.git

      git push -u origin master 第一次需要添加-u建立连接，之后就不用加了

十一、bug分支管理

      正在进行手头上的工作，突然来了bug，需要重新创建分支来修复，但手头上的工作暂时还不能提交，此时就要用到
      git stash:可以把当前工作现场“储藏”起来，等以后恢复现场后继续工作。
      git stash list:查看保存的工作现场
      git stash apply:回到之前手头上的工作
      git stash drop:删除无用的stash
      git stash pop:等同于上两个步骤的合体
      
十二、多人协作
     
      git remote：查看远程仓库信息
      git remote -v：查看远程仓库的详细信息，显示了可以抓取和推送的origin的地址。如果没有推送权限，就看不到push的地址。
      git push origin master：推送本地暂存区主干数据到远程仓库的主干
      git push origin dev：推送本地分支数据到远程仓库的仓库分支
      git checkout -b dev origin/dev：要在dev分支上开发，就必须创建远程origin的dev分支到本地
      git pull：拉去远程仓库的数据到本地
         ――There is no tracking information for the current branch.此时若出现这个异常
                 是因为没有指定本地dev分支与远程origin/dev分支的链接，所以输入：
                 git branch --set-upstream-to=origin/dev dev
	 git branch --set-upstream branch-name origin/branch-name:这个命令已经被移除

十三、Rebase

      git rebase：把本地未push的分叉提交历史整理成直线，目的是使得我们在查看历史提交的变化时更容易，因为分叉的提交需要三方对比。

十四、标签管理
  
       git tag：查看所有标签
       git tag v1.0：添加标签
       git tag v1.0 c32ge02：给指定id的提交添加标签
       git show v1.0：展示该标签的详细信息
       git tag -a v1.0 -m "标签说明" c32ge02
       git tag -d v1.0：删除标签
       git push origin v1.0：推送某个标签到远程
       git push origin --tags：推送全部尚未推送的标签到远程
       git push origin :refs/tags/v1.0：删除远程标签，前提是先删除本地标签

十五、远程库
   
       git remote rm origin：删除已有的远程库
       git remote add origin git@gitee.com:liaoxuefeng/learngit.git：码云添加远程库的操作
    添加多个远程库：
       git remote add github git@github.com:lpy0507/MyGit.git
       git remote add gitee git@gitee.com:lpy0507/MyGitee.git
    这里分别用github和gitee代替了之前的origin

十六、配置别名

      git config --global alias.co checkout：把checkout缩写成co
      git config --global alias.ci commit：把commit缩写成ci
      ...
      git config --global alias.rtH 'reset HEAD'
    eg:git rtH test.txt =git reset HEAD test.txt
    丧心病狂:git config --global alias.lg "log --color --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' --abbrev-commit"



